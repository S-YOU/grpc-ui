// Code generated by protoc-gen-go.
// source: example.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	example.proto

It has these top-level messages:
	GetUserReq
	User
	Req
	Res
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetUserReq struct {
	FirstName string `protobuf:"bytes,1,opt,name=firstName" json:"firstName,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=lastName" json:"lastName,omitempty"`
}

func (m *GetUserReq) Reset()                    { *m = GetUserReq{} }
func (m *GetUserReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserReq) ProtoMessage()               {}
func (*GetUserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetUserReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *GetUserReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type User struct {
	FirstName string `protobuf:"bytes,1,opt,name=firstName" json:"firstName,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=lastName" json:"lastName,omitempty"`
	Active    bool   `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type Req struct {
	Int32Field    int32   `protobuf:"varint,1,opt,name=int32field" json:"int32field,omitempty"`
	Int64Field    int64   `protobuf:"varint,2,opt,name=int64field" json:"int64field,omitempty"`
	Floatfield    float32 `protobuf:"fixed32,3,opt,name=floatfield" json:"floatfield,omitempty"`
	Doublefield   float64 `protobuf:"fixed64,4,opt,name=doublefield" json:"doublefield,omitempty"`
	Uint32Field   uint32  `protobuf:"varint,5,opt,name=uint32field" json:"uint32field,omitempty"`
	Uint64Field   uint64  `protobuf:"varint,6,opt,name=uint64field" json:"uint64field,omitempty"`
	Sint32Field   int32   `protobuf:"zigzag32,7,opt,name=sint32field" json:"sint32field,omitempty"`
	Sint64Field   int64   `protobuf:"zigzag64,8,opt,name=sint64field" json:"sint64field,omitempty"`
	Fixed32Field  uint32  `protobuf:"fixed32,9,opt,name=fixed32field" json:"fixed32field,omitempty"`
	Fixed64Field  uint64  `protobuf:"fixed64,10,opt,name=fixed64field" json:"fixed64field,omitempty"`
	Sfixed32Field int32   `protobuf:"fixed32,11,opt,name=sfixed32field" json:"sfixed32field,omitempty"`
	Sfixed64Field int64   `protobuf:"fixed64,12,opt,name=sfixed64field" json:"sfixed64field,omitempty"`
	Boolfield     bool    `protobuf:"varint,13,opt,name=boolfield" json:"boolfield,omitempty"`
	Stringfield   string  `protobuf:"bytes,14,opt,name=stringfield" json:"stringfield,omitempty"`
	Bytesfield    []byte  `protobuf:"bytes,15,opt,name=bytesfield,proto3" json:"bytesfield,omitempty"`
	Int32Repeated []int32 `protobuf:"varint,16,rep,packed,name=int32Repeated" json:"int32Repeated,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Req) GetInt32Field() int32 {
	if m != nil {
		return m.Int32Field
	}
	return 0
}

func (m *Req) GetInt64Field() int64 {
	if m != nil {
		return m.Int64Field
	}
	return 0
}

func (m *Req) GetFloatfield() float32 {
	if m != nil {
		return m.Floatfield
	}
	return 0
}

func (m *Req) GetDoublefield() float64 {
	if m != nil {
		return m.Doublefield
	}
	return 0
}

func (m *Req) GetUint32Field() uint32 {
	if m != nil {
		return m.Uint32Field
	}
	return 0
}

func (m *Req) GetUint64Field() uint64 {
	if m != nil {
		return m.Uint64Field
	}
	return 0
}

func (m *Req) GetSint32Field() int32 {
	if m != nil {
		return m.Sint32Field
	}
	return 0
}

func (m *Req) GetSint64Field() int64 {
	if m != nil {
		return m.Sint64Field
	}
	return 0
}

func (m *Req) GetFixed32Field() uint32 {
	if m != nil {
		return m.Fixed32Field
	}
	return 0
}

func (m *Req) GetFixed64Field() uint64 {
	if m != nil {
		return m.Fixed64Field
	}
	return 0
}

func (m *Req) GetSfixed32Field() int32 {
	if m != nil {
		return m.Sfixed32Field
	}
	return 0
}

func (m *Req) GetSfixed64Field() int64 {
	if m != nil {
		return m.Sfixed64Field
	}
	return 0
}

func (m *Req) GetBoolfield() bool {
	if m != nil {
		return m.Boolfield
	}
	return false
}

func (m *Req) GetStringfield() string {
	if m != nil {
		return m.Stringfield
	}
	return ""
}

func (m *Req) GetBytesfield() []byte {
	if m != nil {
		return m.Bytesfield
	}
	return nil
}

func (m *Req) GetInt32Repeated() []int32 {
	if m != nil {
		return m.Int32Repeated
	}
	return nil
}

type Res struct {
	Int32Field    int32   `protobuf:"varint,1,opt,name=int32field" json:"int32field,omitempty"`
	Int64Field    int64   `protobuf:"varint,2,opt,name=int64field" json:"int64field,omitempty"`
	Floatfield    float32 `protobuf:"fixed32,3,opt,name=floatfield" json:"floatfield,omitempty"`
	Doublefield   float64 `protobuf:"fixed64,4,opt,name=doublefield" json:"doublefield,omitempty"`
	Uint32Field   uint32  `protobuf:"varint,5,opt,name=uint32field" json:"uint32field,omitempty"`
	Uint64Field   uint64  `protobuf:"varint,6,opt,name=uint64field" json:"uint64field,omitempty"`
	Sint32Field   int32   `protobuf:"zigzag32,7,opt,name=sint32field" json:"sint32field,omitempty"`
	Sint64Field   int64   `protobuf:"zigzag64,8,opt,name=sint64field" json:"sint64field,omitempty"`
	Fixed32Field  uint32  `protobuf:"fixed32,9,opt,name=fixed32field" json:"fixed32field,omitempty"`
	Fixed64Field  uint64  `protobuf:"fixed64,10,opt,name=fixed64field" json:"fixed64field,omitempty"`
	Sfixed32Field int32   `protobuf:"fixed32,11,opt,name=sfixed32field" json:"sfixed32field,omitempty"`
	Sfixed64Field int64   `protobuf:"fixed64,12,opt,name=sfixed64field" json:"sfixed64field,omitempty"`
	Boolfield     bool    `protobuf:"varint,13,opt,name=boolfield" json:"boolfield,omitempty"`
	Stringfield   string  `protobuf:"bytes,14,opt,name=stringfield" json:"stringfield,omitempty"`
	Bytesfield    []byte  `protobuf:"bytes,15,opt,name=bytesfield,proto3" json:"bytesfield,omitempty"`
	Int32Repeated []int32 `protobuf:"varint,16,rep,packed,name=int32Repeated" json:"int32Repeated,omitempty"`
}

func (m *Res) Reset()                    { *m = Res{} }
func (m *Res) String() string            { return proto.CompactTextString(m) }
func (*Res) ProtoMessage()               {}
func (*Res) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Res) GetInt32Field() int32 {
	if m != nil {
		return m.Int32Field
	}
	return 0
}

func (m *Res) GetInt64Field() int64 {
	if m != nil {
		return m.Int64Field
	}
	return 0
}

func (m *Res) GetFloatfield() float32 {
	if m != nil {
		return m.Floatfield
	}
	return 0
}

func (m *Res) GetDoublefield() float64 {
	if m != nil {
		return m.Doublefield
	}
	return 0
}

func (m *Res) GetUint32Field() uint32 {
	if m != nil {
		return m.Uint32Field
	}
	return 0
}

func (m *Res) GetUint64Field() uint64 {
	if m != nil {
		return m.Uint64Field
	}
	return 0
}

func (m *Res) GetSint32Field() int32 {
	if m != nil {
		return m.Sint32Field
	}
	return 0
}

func (m *Res) GetSint64Field() int64 {
	if m != nil {
		return m.Sint64Field
	}
	return 0
}

func (m *Res) GetFixed32Field() uint32 {
	if m != nil {
		return m.Fixed32Field
	}
	return 0
}

func (m *Res) GetFixed64Field() uint64 {
	if m != nil {
		return m.Fixed64Field
	}
	return 0
}

func (m *Res) GetSfixed32Field() int32 {
	if m != nil {
		return m.Sfixed32Field
	}
	return 0
}

func (m *Res) GetSfixed64Field() int64 {
	if m != nil {
		return m.Sfixed64Field
	}
	return 0
}

func (m *Res) GetBoolfield() bool {
	if m != nil {
		return m.Boolfield
	}
	return false
}

func (m *Res) GetStringfield() string {
	if m != nil {
		return m.Stringfield
	}
	return ""
}

func (m *Res) GetBytesfield() []byte {
	if m != nil {
		return m.Bytesfield
	}
	return nil
}

func (m *Res) GetInt32Repeated() []int32 {
	if m != nil {
		return m.Int32Repeated
	}
	return nil
}

func init() {
	proto.RegisterType((*GetUserReq)(nil), "pb.GetUserReq")
	proto.RegisterType((*User)(nil), "pb.User")
	proto.RegisterType((*Req)(nil), "pb.Req")
	proto.RegisterType((*Res)(nil), "pb.Res")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Example service

type ExampleClient interface {
	Test(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*User, error)
}

type exampleClient struct {
	cc *grpc.ClientConn
}

func NewExampleClient(cc *grpc.ClientConn) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) Test(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := grpc.Invoke(ctx, "/pb.Example/Test", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/pb.Example/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Example service

type ExampleServer interface {
	Test(context.Context, *Req) (*Res, error)
	GetUser(context.Context, *GetUserReq) (*User, error)
}

func RegisterExampleServer(s *grpc.Server, srv ExampleServer) {
	s.RegisterService(&_Example_serviceDesc, srv)
}

func _Example_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Example/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).Test(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Example/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Example_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Example",
	HandlerType: (*ExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _Example_Test_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Example_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}

func init() { proto.RegisterFile("example.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x94, 0xbd, 0xae, 0x9b, 0x40,
	0x10, 0x85, 0xb5, 0x06, 0x03, 0x1e, 0x1b, 0xdb, 0xd9, 0x22, 0x42, 0x56, 0x14, 0xad, 0x48, 0x8a,
	0xad, 0x5c, 0xd8, 0x51, 0xde, 0x20, 0x3f, 0x55, 0x8a, 0x51, 0x22, 0xa5, 0x85, 0x30, 0x44, 0x48,
	0xd8, 0x60, 0x76, 0x1d, 0x39, 0x8f, 0x74, 0xdf, 0xf2, 0x6a, 0xf9, 0x31, 0x4b, 0x75, 0xa5, 0x5b,
	0xbb, 0x63, 0xbe, 0x73, 0x74, 0x18, 0x98, 0xd1, 0x40, 0x48, 0xb7, 0xe4, 0x54, 0x97, 0xb4, 0xaf,
	0x9b, 0x4a, 0x57, 0x7c, 0x56, 0xa7, 0xf1, 0x57, 0x80, 0x6f, 0xa4, 0x7f, 0x29, 0x6a, 0x90, 0x2e,
	0xfc, 0x1d, 0x2c, 0xf2, 0xa2, 0x51, 0xfa, 0x47, 0x72, 0xa2, 0x88, 0x09, 0x26, 0x17, 0x38, 0x02,
	0xbe, 0x83, 0xa0, 0x4c, 0x7a, 0x71, 0xd6, 0x8a, 0xf7, 0x3a, 0xfe, 0x0d, 0xae, 0x09, 0x79, 0x7d,
	0x02, 0x7f, 0x0b, 0x5e, 0xf2, 0x47, 0x17, 0xff, 0x28, 0x72, 0x04, 0x93, 0x01, 0xf6, 0x55, 0xfc,
	0xe4, 0x82, 0x63, 0x7a, 0x7b, 0x0f, 0x50, 0x9c, 0xf5, 0xf1, 0x90, 0x17, 0x54, 0x66, 0x6d, 0xf4,
	0x1c, 0x2d, 0xd2, 0xeb, 0x9f, 0x3f, 0x75, 0xba, 0x49, 0x77, 0xd0, 0x22, 0x46, 0xcf, 0xcb, 0x2a,
	0xd1, 0x9d, 0x6e, 0xde, 0x31, 0x43, 0x8b, 0x70, 0x01, 0xcb, 0xac, 0xba, 0xa6, 0x25, 0x75, 0x06,
	0x57, 0x30, 0xc9, 0xd0, 0x46, 0xc6, 0x71, 0xb5, 0x5a, 0x98, 0x0b, 0x26, 0x43, 0xb4, 0xd1, 0xe0,
	0x18, 0x9a, 0xf0, 0x04, 0x93, 0x2e, 0xda, 0xc8, 0x38, 0x94, 0x95, 0xe1, 0x0b, 0x26, 0xdf, 0xa0,
	0x8d, 0x06, 0xc7, 0x90, 0x11, 0x08, 0x26, 0x39, 0xda, 0x88, 0xc7, 0xb0, 0xca, 0x8b, 0x1b, 0x65,
	0x43, 0xc8, 0x42, 0x30, 0xe9, 0xe3, 0x84, 0xdd, 0x3d, 0x43, 0x0c, 0x08, 0x26, 0x3d, 0x9c, 0x30,
	0xfe, 0x11, 0x42, 0x35, 0x09, 0x5a, 0x0a, 0x26, 0x37, 0x38, 0x85, 0xa3, 0x6b, 0x88, 0x5a, 0x09,
	0x26, 0xb7, 0x38, 0x85, 0x66, 0xee, 0x69, 0x55, 0x95, 0x9d, 0x23, 0x6c, 0x07, 0x38, 0x82, 0xf6,
	0x9b, 0x74, 0x53, 0x9c, 0xff, 0x76, 0xfa, 0xba, 0x1d, 0xbd, 0x8d, 0xcc, 0x74, 0xd2, 0xff, 0x9a,
	0x54, 0x67, 0xd8, 0x08, 0x26, 0x57, 0x68, 0x11, 0xd3, 0x45, 0xfb, 0x8f, 0x90, 0x6a, 0x4a, 0x34,
	0x65, 0xd1, 0x56, 0x38, 0x72, 0x8e, 0x53, 0xd8, 0xef, 0x8a, 0x7a, 0xec, 0xca, 0x63, 0x57, 0x5e,
	0xda, 0x95, 0xc3, 0x77, 0xf0, 0xbf, 0x74, 0xe7, 0x90, 0x47, 0xe0, 0xfe, 0x24, 0xa5, 0xb9, 0xbf,
	0xaf, 0xd3, 0x3d, 0xd2, 0x65, 0xd7, 0x3f, 0x28, 0xfe, 0x01, 0xfc, 0xfe, 0x3c, 0xf2, 0xb5, 0x61,
	0xe3, 0xad, 0xdc, 0x05, 0xa6, 0x36, 0x45, 0xea, 0xb5, 0xe7, 0xf4, 0xf8, 0x1c, 0x00, 0x00, 0xff,
	0xff, 0xb8, 0xe6, 0xcd, 0x12, 0x5f, 0x05, 0x00, 0x00,
}
